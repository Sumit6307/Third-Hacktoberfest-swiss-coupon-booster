# Spring Boot Knowledge

## 1. Introduction

* **Spring Boot** is an open-source framework based on the **Spring Framework**.
* Simplifies the process of building **production-ready** applications.
* Provides **auto-configuration**, **embedded servers**, and **starter dependencies** to reduce boilerplate code.

---

## 2. Key Features

1. **Auto-Configuration** – Automatically configures Spring applications based on dependencies.
2. **Spring Boot Starters** – Pre-configured dependencies for faster setup (e.g., `spring-boot-starter-web`).
3. **Embedded Servers** – Comes with **Tomcat, Jetty, Undertow** built-in, so no need to deploy WAR files.
4. **Spring Boot CLI** – Run and test Spring Boot apps using command line.
5. **Actuator** – Provides production-ready features such as health check, metrics, monitoring.
6. **Externalized Configuration** – Use `application.properties` or `application.yml`.

---

## 3. Project Setup

* Use **Spring Initializr**: [https://start.spring.io](https://start.spring.io)
  Select:

  * Project: Maven / Gradle
  * Language: Java / Kotlin
  * Dependencies: Web, JPA, Security, etc.

---

## 4. Common Dependencies

* `spring-boot-starter-web` → Build RESTful web apps.
* `spring-boot-starter-data-jpa` → ORM with Hibernate & JPA.
* `spring-boot-starter-security` → Authentication & Authorization.
* `spring-boot-starter-test` → Testing libraries.

---

## 5. Annotations in Spring Boot

* `@SpringBootApplication` → Entry point of the application.
* `@RestController` → Defines RESTful web controller.
* `@RequestMapping` → Maps HTTP requests to handler methods.
* `@Autowired` → Dependency Injection.
* `@Entity` → Defines JPA entity.
* `@Service`, `@Repository`, `@Component` → Define Spring Beans.

---

## 6. Application Properties (examples)

```properties
server.port=8081
spring.datasource.url=jdbc:mysql://localhost:3306/testdb
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.hibernate.ddl-auto=update
```

---

## 7. Running the Application

* Using Maven:

  ```
  mvn spring-boot:run
  ```
* Using Gradle:

  ```
  ./gradlew bootRun
  ```
* Run via main class:

  ```java
  public static void main(String[] args) {
      SpringApplication.run(Application.class, args);
  }
  ```

---

## 8. Advantages

* Rapid development with minimal configuration.
* Microservices support.
* Easy integration with databases, messaging systems, and cloud platforms.
* Production-ready with monitoring & logging tools.

---

## 9. Spring Boot vs Spring

* Spring requires a lot of boilerplate configuration.
* Spring Boot provides **auto-configuration** and **starter packs**.
* Spring Boot allows **standalone applications** with embedded servers.

---

## 10. Useful Commands

* Build JAR:

  ```
  mvn clean install
  ```
* Run JAR:

  ```
  java -jar target/app-name.jar
  ```
